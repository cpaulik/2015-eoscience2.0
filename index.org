#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_mathjax:nil
#+OPTIONS: reveal_overview:t reveal_progress:t
#+OPTIONS: reveal_rolling_links:nil reveal_slide_number:t
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+options: toc:nil ^:nil num:nil
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
# #+REVEAL_ROOT: ../../reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ./code_formatting.css
#+REVEAL_EXTRA_JS: 
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1> <h2>%a</h2> <h2>%e</h2> <h2>%d</h2> <img width="200px" src="./GEO Logo Blau-WeiÃŸ.svg">
#+REVEAL_TITLE_SLIDE_BACKGROUND: 
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE: 200px
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_PLUGINS:
#+LOCAL_VARIABLES:
#+End:

#+AUTHOR: Christoph Paulik, Sebastian Hahn, Andreea Plocon, Christoph Reimer, Alexander Gruber
#+email: christoph.paulik@geo.tuwien.ac.at
#+Title: Tools for analysis of geospatial time series data.




* Background

- Remote sensing of soil moisture
- Time series based retrieval algorithm
- Temporal dynamics are often more important for analysis than spatial distribution
- Grew out of soil moisture validation

# image of soil moisture swath and time series

** Data preparation for time series analysis

# - Remote sensing data comes in "image" formats
# - Working with level 1 data can be difficult (satellite swaths)
#   - Resampling/projecting to a common grid
#   - Sometimes temporal resampling (which we want to avoid)

#+begin_src dot :file ./img/data-prep.svg :cmdline -Kdot -Tsvg
digraph G {
                resolution=100
                rankdir=LR
                bgcolor=Transparent
                fontcolor=White
                
                node [style="filled", color=White, fontname="Hack" ,shape=box] //All nodes will this shape and colour
                edge [color=Gray] //All the lines look like this
                
                data [label="RS data" shape=Mrecord]
                resamp [label="Resampling"]
                reproj [label="Reprojection"]
                ts [label="Temporal resampling", color="#888888"]
                store [label="Storage as DatasetTs" shape=Mrecord]

                data->{resamp reproj}->ts->store
                {rank=same; ts store}
}
#+end_src

 #+RESULTS:
 [[file:./img/data-prep.svg]]

** Typical workflow for time series analysis

# - Comparing geospatial time series on different grids
#   - Nearest neighbor search
#   - Spatial resampling necessary?
#   - Temporal matching
#   - Applying an algorithm
#   - Writing results
#+begin_src dot :file ./img/workflow.svg :cmdline -Kdot -Tsvg
digraph G {
                resolution=100
                rankdir=UD
                bgcolor=Transparent
                fontcolor=White
                
                node [style="filled", color=White, fontname="Hack" ,shape=box] //All nodes will this shape and colour
                edge [color=Gray] //All the lines look like this
                
                data [label="DatasetTs" shape=Mrecord]
                data1 [label="DatasetTs" shape=Mrecord]
                spatial [label="Spatial matching"]
                dataprep [label="Data preparation"]
                algo [label="Algorithm"]
                store [label="Storage of results" shape=Mrecord]

                {data1}->spatial 
                {data}->spatial 
                spatial->dataprep 
                dataprep->algo 
                algo->store 
                {rank=same; spatial algo}
}
#+end_src

#+RESULTS:
[[file:./img/workflow.svg]]



** Spatial referencing
- Discrete Global grids
  - SMOS grid - Icosahedron Snyder Equal Area (ISEA)
  - Gaussian Grids - used by ECMWF
- Grid systems
  - UTM system
  - Equi7 system [cite:bauer2014optimisation]

#+begin_src python :results file :exports results
  from mpl_toolkits.basemap import Basemap
  import matplotlib.pyplot as plt
  import numpy as np
  fig = plt.figure()
  fig.patch.set_alpha(0)
  ax = fig.add_subplot(111)
  # set up orthographic m projection with
  # perspective of satellite looking down at 50N, 100W.
  # use low resolution coastlines.
  m = Basemap(projection='ortho',lat_0=25,lon_0=15,resolution='l', ax=ax)
  # draw coastlines, country boundaries, fill continents.
  m.drawcoastlines(linewidth=0.25)
  m.drawcountries(linewidth=0.25)
  m.fillcontinents(color='#888888',lake_color='#006699', zorder=10)
  # draw the edge of the m projection region (the projection limb)
  m.drawmapboundary(fill_color='#006699')
  # draw lat/lon grid lines every 30 degrees.
  # m.drawmeridians(np.arange(0,360,30))
  # m.drawparallels(np.arange(-90,90,30))
  # make 200km DGG for illustration
  d = 200
  R = 6371
  c = R * 2*np.pi
  fullstep = 360/(c/d)
  lat = np.arange(-90, 90, fullstep)
  cs = np.cos(lat/180*np.pi)*R*2*np.pi
  steps = 360/(cs/d)
  lons = []
  lats = []
  for step, l in zip(steps, lat):
      ls = np.linspace(-180, 180, np.max([1, 360/step]))
      lons.append(ls)
      lats.append(np.full_like(ls, l))
  lons = np.concatenate(lons)
  lats = np.concatenate(lats)
  m.scatter(lons.flatten(), lats.flatten(), latlon=True, s=2, marker='+', c='w', zorder=11)
  plt.tight_layout()
  plt.savefig("img/dgg-globe.png", dpi=300)
  return './img/dgg-globe.png'
#+end_src

#+RESULTS:
[[file:./img/dgg-globe.png]]
** pygeogrids

- [[https://github.com/TUW-GEO/pygeogrids][pygeogrids file:./img/GitHub-Mark-Light-64px.png]] is a package for managing discrete (global) grids
- has a notion of subdivision that can correspond to I/O units (e.g. netCDF files)
# - Nearest neighbor search
# - Can yield grid points in "correct" order
# - Calculation of lookup tables between grid objects
# - I/O to netCDF
# Better show graphic of cell-grid
#+begin_src python :results file :exports results
  from mpl_toolkits.basemap import Basemap
  import matplotlib.pyplot as plt
  import numpy as np
  fig = plt.figure(figsize=(7,3))
  fig.patch.set_alpha(0)
  ax = fig.add_subplot(111)
  # set up orthographic m projection with
  # perspective of satellite looking down at 50N, 100W.
  # use low resolution coastlines.
  # m = Basemap(projection='ortho',lat_0=25,lon_0=15,resolution='l', ax=ax) # 
  m = Basemap(llcrnrlon=-10.5,llcrnrlat=32.,urcrnrlon=45.566,urcrnrlat=56.352,\
            rsphere=(6378137.00,6356752.3142),\
            resolution='l',area_thresh=1000.,projection='lcc',\
            lat_1=50.,lon_0=14.,ax=ax)
  # draw coastlines, country boundaries, fill continents.
  m.drawcoastlines(linewidth=0.25)
  m.drawcountries(linewidth=0.25)
  m.fillcontinents(color='#888888',lake_color='#006699', zorder=10)
  # draw the edge of the m projection region (the projection limb)
  m.drawmapboundary(fill_color='#006699', zorder=11)
  # draw lat/lon grid lines every 30 degrees.
  m.drawmeridians(np.arange(0,360,5), zorder=11, dashes=[1,0.1])
  m.drawparallels(np.arange(-90,90,5), zorder=11, dashes=[1,0.1])
  # make 200km DGG for illustration
  d = 100
  R = 6371
  c = R * 2*np.pi
  fullstep = 360/(c/d)
  lat = np.arange(-90, 90, fullstep)
  cs = np.cos(lat/180*np.pi)*R*2*np.pi
  steps = 360/(cs/d)
  lons = []
  lats = []
  for step, l in zip(steps, lat):
      ls = np.linspace(-180, 180, np.max([1, 360/step]))
      lons.append(ls)
      lats.append(np.full_like(ls, l))
  lons = np.concatenate(lons)
  lats = np.concatenate(lats)
  m.scatter(lons.flatten(), lats.flatten(), latlon=True, s=1, marker='+', c='w', zorder=12)
  plt.tight_layout()
  plt.savefig("img/cells-dgg.png", dpi=300)
  return './img/cells-dgg.png'
#+end_src

#+RESULTS:
[[file:./img/cells-dgg.png]]

** How to store time series
- Resample to data cube 
- Store as compressed sparse arrays
- Climate and Forecast (CF) Metadata conventions http://cfconventions.org/

** CF - Orthogonal multidimensional
file:./img/CF-DSG-orthogonal-multidim.svg
** CF - Incomplete multidimensional
file:./img/CF-DSG-incomplete-multidim.svg
** CF - Contiguous ragged
file:./img/CF-DSG-contigous-ragged.svg
** CF - Indexed ragged
file:./img/CF-DSG-indexed-ragged.svg
 
** Interface for data I/O
[[https://github.com/TUW-GEO/pygeobase][pygeobase file:./img/GitHub-Mark-Light-64px.png]] defines abstract base classes for a common interface

#+begin_src python :results none :exports code
read_ts(gpi)
read_ts(lon, lat)
iter_ts()
read_img(datetime)
iter_img(startdate, enddate)
#+end_src

#+begin_src org :exports none :tangle notes.org
  - we also want to support some kind of slicing syntax in the future
  - Internally we have implemented the interface for several formats (grib, hdf5)
    but general purpose implementations are still missing
#+end_src
# so now we have the interface but how do we store the time series

** Implemenation for netCDF CF
- [[https://github.com/TUW-GEO/pynetCF][pynetCF file:./img/GitHub-Mark-Light-64px.png]] implements the interface for netCDF
  files according to the CF conventions
- Works but writing of data can be optimized
- integration with general purpose packages ([[http://xray.readthedocs.org/en/stable/][xray]])

** Dataset that knows itself

- Can traverse itself and return a time series per grid point
- Optimized I/O because dataset object knows how data is stored
 
#+begin_src dot :file ./img/Dataset.svg :cmdline -Kdot -Tsvg
digraph structs {
                fixedsize=true;
                resolution=150
                bgcolor=Transparent
                
                node [style="filled" fillcolor=White, color=Black, fontname="Hack" ,shape=box] //All nodes will this shape and colour
                edge [color=Gray] //All the lines look like this
                
                data [label="{DatasetTs|.grid\n.read_ts()\n.iter_ts()}" shape=Mrecord]
}
#+end_src

#+RESULTS:
[[file:./img/Dataset.svg]]

** Algorithms and processing
- [[https://github.com/TUW-GEO/pytesmo][pytesmo
  file:./img/GitHub-Mark-Light-64px.png]] implements temporal matching,
  filtering, and algorithms specifically needed for soil moisture validation
  e.g.
  [[http://rs.geo.tuwien.ac.at/validation_tool/pytesmo/docs/examples.html#triple-collocation-and-triple-collocation-based-scaling][triple
  collocation]].
- Framework for time series based computations parallelized via
  [[http://ipyparallel.readthedocs.org/en/latest/][ipyparallel]] (formerly
  IPython parallel)


** Example - global validation
#+begin_src python :results code :exports code
  ecmwf_reader = ECMWF.ERA_Interim()
  ascat_reader = AscatH25_SSM()

  datasets = {'ASCAT': {'class': ascat_reader,
                        'columns': ['sm'],
                        'type': 'reference'},
              'ERAINT': {'class': ecmwf_reader,
                         'columns': ['soilm-l1'],
                         'type': 'other',
                         'kwargs': {'period': period},
                         'grids_compatible': False,
                         'use_lut': True, 'lut_max_dist': 100000}}

  process = Validation(datasets=datasets,
                       temporal_matcher=BasicTemporalMatching(),
                       scaling='lin_cdf_match', 
                       metrics_calculator=BasicMetrics(),
                       period=period)
  jobs = process.get_processing_jobs()
  return process, jobs
#+end_src


** Where do the packages fit in
#+begin_src dot :file ./img/data-prep-packages.svg :cmdline -Kdot -Tsvg :exports none
digraph G {
                resolution=100
                rankdir=LR
                bgcolor=Transparent
                fontcolor=White
                
                node [style="filled", color=White, fontname="Hack" ,shape=box] //All nodes will this shape and colour
                edge [color=Gray fontname="Hack" fontcolor="lightGreen"] //All the lines look like this
                
                data [label="RS data" shape=Mrecord]
                resamp [label="Resampling"]
                reproj [label="Reprojection"]
                store [label="Storage as DatasetTs" shape=Mrecord]

                data->{resamp reproj} [label="pygeobase"]
                {resamp reproj}->store [label="pynetCF"]
                {rank=same; store}
}
#+end_src

#+RESULTS:
[[file:./img/data-prep-packages.svg]]

#+begin_src dot :file ./img/workflow-packages.svg :cmdline -Kdot -Tsvg
digraph G {
                resolution=100
                rankdir=UD
                bgcolor=Transparent
                fontcolor=White
                nodesep=1.0
                
                node [style="filled", color=White, fontname="Hack" ,shape=box] //All nodes will this shape and colour
                edge [color=Gray fontname="Hack" fontcolor="#42affa"] //All the lines look like this
                
                data [label="DatasetTs" shape=Mrecord]
                data1 [label="DatasetTs" shape=Mrecord]
                spatial [label="Spatial matching"]
                dataprep [label="Data preparation"]
                algo [label="Algorithm"]
                store [label="Storage of results" shape=Mrecord]

                {data1}->spatial 
                {data}->spatial [label="pygeogrids"]
                spatial->dataprep [label="pytesmo"]
                dataprep->algo [label="pytesmo"]
                algo->store [label="pynetCF"]
                {rank=same; spatial algo}
}
#+end_src

#+RESULTS:
[[file:./img/workflow-packages.svg]]

* Summary
- Suite of Python packages for time series optimized processing
- [[https://github.com/TUW-GEO/pytesmo][pytesmo
  file:./img/GitHub-Mark-Light-64px.png]]  
  [[http://badge.fury.io/py/pytesmo][https://badge.fury.io/py/pytesmo.svg]]
  [[http://dx.doi.org/10.5281/zenodo.29593][https://zenodo.org/badge/doi/10.5281/zenodo.29593.svg]]
- [[https://github.com/TUW-GEO/pygeogrids][pygeogrids
  file:./img/GitHub-Mark-Light-64px.png]]  
  [[http://badge.fury.io/py/pygeogrids][https://badge.fury.io/py/pygeogrids.svg]]
  [[http://dx.doi.org/10.5281/zenodo.31613][https://zenodo.org/badge/doi/10.5281/zenodo.17406.svg]]
- [[https://github.com/TUW-GEO/pygeobase][pygeobase
  file:./img/GitHub-Mark-Light-64px.png]]  
  [[http://badge.fury.io/py/pygeobase][https://badge.fury.io/py/pygeobase.svg]]
- [[https://github.com/TUW-GEO/pynetCF][pynetCF
  file:./img/GitHub-Mark-Light-64px.png]]
- BSD licensed
# list of packages with badges and license
* Thank you, Questions?
- Get in touch
  - You can find this presentation at http://cpaulik.github.io/2015-eoscience2.0
  - [[https://github.com/cpaulik][cpaulik file:./img/GitHub-Mark-Light-64px.png]]
  - [[https://github.com/TUW-GEO][TUW-GEO file:./img/GitHub-Mark-Light-64px.png]]
  - christoph.paulik@geo.tuwien.ac.at
- Thanks to the Python open source community.
[[http://creativecommons.org/licenses/by/4.0/deed][http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/by-sa.svg]]

* References 
bibliographystyle:plain
bibliography:/home/cp/Dropbox/Arbeit/Papers/bibliography.bib
